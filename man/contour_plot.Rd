% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/contour_plot.R
\name{contour_plot}
\alias{contour_plot}
\title{Create contour plot.}
\usage{
contour_plot(
  grid_vals,
  value,
  edge_handling = "none",
  rad = NULL,
  max_x = NULL,
  max_y = NULL
)
}
\arguments{
\item{grid_vals}{Data frame containing coordinates and values of the contour
variable for a series of points. Columns containing x and y coordinates must
be named \code{x_coord} and \code{y_coord} respectively but the name of the
contour variable column can be anything.}

\item{value}{Name of contour variable column as a string.}

\item{edge_handling}{String specifying whether values close to the stand edge
should be adjusted. Possible values are \code{"none"} (default) and
\code{"multiply"}. See Details.}

\item{rad}{Distance from edge of stand below which values should be adjusted.
Must be in same units as the coordinates in \code{grid_vals}.}

\item{max_x}{Maximum possible x coordinate of forest stand.}

\item{max_y}{Maximum possible y coordinate of forest stand.}
}
\value{
A contour plot will appear in the plotting window.
}
\description{
Creates a contour plot using values of a specified variable associated with
coordinates in the forest stand.
}
\details{
This function takes point estimates of some variable and interpolates a 
continuous contour plot across the forest stand. For some variables, such as
soil nutrient levels, the contour will remain accurate up to the stand
boundary. However, if the variable represents a summary of the neighborhood
around the points such as local tree density, any point whose neighborhood
overlaps the stand boundary will be an underestimate.

This function can handle these edge effects by calculating the proportion of
each point's neighborhood included in the data and multiplying their value
to estimate a complete neighborhood. This is achieved by specifying
\code{edge_handling = "multiply"} - see Examples.
}
\examples{
library(dplyr, warn.conflicts = F)
# Create coordinate grid
locations <- data.frame(
  loc_id = paste("A", 1:441, sep = ""),
  x_coord = rep(seq(0, 100, 5), times = 21),
  y_coord = rep(seq(0, 100, 5), each = 21))
  
# Calculate density for each point
nbhds <- neighborhoods(mapping, stands = "AB08", radius = 10,
                       coords = locations)
nbhd_summ <- neighborhood_summary(nbhds, "loc_id", 10, "angular")

# Format data for contour_plot
grid_data <- locations \%>\%
  left_join(nbhd_summ \%>\%
    select(loc_id, all_angle_sum),
    by = "loc_id") \%>\%
  select(-loc_id)

# Create contour plot
contour_plot(grid_data, "all_angle_sum", edge_handling = "multiply",
  rad = 10, max_x = 100, max_y = 100)
}
